x_twoPop <- x
plot(density(x))
read("poppcr/data/x_twoPop.Rdata")
load("poppcr/data/x_twoPop.Rdata")
x_twoPop <- x
plot(density(x))
save(x_twoPop, file = "poppcr/data/x_twoPop.RData")
load("poppcr/data/x_multiPop.Rdata")
x_multiPop <- x
plot(density(x))
save(x_twoPop, file = "poppcr/data/x_twoPop.RData")
save(x_multiPop, file = "poppcr/data/x_multiPop.RData")
()
load("poppcr/data/x_onePop.Rdata")
plot(density(x_onePop))
load("poppcr/data/x_twoPop.Rdata")
plot(density(x_twoPop))
load("poppcr/data/x_multiPop.Rdata")
plot(density(x_multiPop))
save(list=c("x_onePop", "x_twoPop", "x_multiPop"), file = "poppcr/data/example-dataset.Rdata")
load("poppcr/data/example-dataset.Rdata")
plot(density(x_onePop))
plot(density(x_twoPop))
plot(density(x_multiPop))
#' @docType data
#'
#' @usage data(example-dataset)
#'
#' @format numerical vectors
#'
#' @keywords datasets
#'
#' @examples
#'
NULL
library(poppcr)
load("example-dataset")
data("example-dataset")
data(example-dataset)
library(poppcr)
data(example_dataset)
data("example_dataset")
library(poppcr)
data("example_dataset")
library(poppcr)
poppcr()
popPCR()
library(poppcr)
library(poppcr)
?popPCR
library(poppcr)
popPCR()
poppcr:popPCR()
library(poppcr)
library(poppcr)
data("example_dataset")
data(example_dataset)
library(poppcr)
data(example_dataset)
x_onePop
library(nycflights13)
x <- sample(1000)
usethis::use_data(x, mtcars)
mtcars
?use_data
# One population
# save(list=c("x_onePop", "x_twoPop", "x_multiPop"), file = "poppcr/data/example-dataset.Rdata")
load("poppcr/data/example-dataset.Rdata")
# One population
# save(list=c("x_onePop", "x_twoPop", "x_multiPop"), file = "poppcr/data/example-dataset.Rdata")
load("poppcr/data/example_dataset.Rdata")
usethis::use_data(x_twoPop, x_onePop, x_multiPop)
setwd("poppcr")
usethis::use_data(x_twoPop, x_onePop, x_multiPop)
library(poppcr)
data("x_onePop")
library(poppcr)
data("x_onePop")
x_twoPop
library(poppcr)
x_twoPop
# One population
hist(x_onePop)
# One population
hist(x_onePop, breaks = 100)
hist(x_twoPop, breaks = 100)
hist(x_multiPop, breaks = 100)
# EM Fitting
#  1. One population data
popPCR(x_onePop, "t")
# ---- Mixture model fitting ---- #
# One population data
popPCR(x_onePop, dist = "t")  # available dist values ("normal", "skewed-normal", "t", "skewed-t")
#' Print fitted mixture model estimates from popPCR
#'
#' @param result.popPCR returned value of popPCR()
#' @export
printSummaryFit <- function(result.popPCR){
r <- result.popPCR
cat(paste0("Results of fitting a ", r@G ,"-component ", r@dist, " mixture model"))
hasDelta <- r@em$distr == "msn" || r@em$distr == "mst"
hasDof   <- r@em$distr == "mvt" || r@em$distr == "mst"
for(i in 1:r@G){
if(i == 1){
popn <- "Negative Population"
}else if(i == r@G){
popn <- "Positive Population"
}else{
popn <- paste0("Rain (", i-1, ") Population")
}
cat(paste0("
",popn,"
Mix prop. : ", round(r@em$pro[i],4),"
Mu        : ", round(r@em$mu[i],4),"
Sigma     : ", round(r@em$sigma[i],4)))
if(hasDof)   cat(paste0("\n        Dof       : ", round(r@em$dof[i],4)))
if(hasDelta) cat(paste0("\n        Delta     : ", round(r@em$delta[i],4)))
}
}
# Output:
#        Populations detected : 1
#        Total droplets : 8000
#        Positive : 1 (0.01%)
#        Negative : 7999 (99.99%)
#
#        Target copies in sample          : 2.9414 ( 95% CI: [ -2.8237 , 8.7064 ] )
#        Mean target copies per partition : 1e-04 ( 95% CI: [ -1e-04 , 4e-04 ] )
printSummaryFit(result)
# ---- Mixture model fitting ---- #
# One population data
result <- popPCR(x_onePop, dist = "t")  # available dist values ("normal", "skewed-normal", "t", "skewed-t")
printSummaryConc(result)
# Output:
#        Populations detected : 1
#        Total droplets : 8000
#        Positive : 1 (0.01%)
#        Negative : 7999 (99.99%)
#
#        Target copies in sample          : 2.9414 ( 95% CI: [ -2.8237 , 8.7064 ] )
#        Mean target copies per partition : 1e-04 ( 95% CI: [ -1e-04 , 4e-04 ] )
printSummaryFit(result)
#    Output:
#        Populations detected : 1
#        Total droplets : 8000
#        Positive : 1 (0.01%)
#        Negative : 7999 (99.99%)
#
#        Target copies in sample          : 2.9414 ( 95% CI: [ -2.8237 , 8.7064 ] )
#        Mean target copies per partition : 1e-04 ( 95% CI: [ -1e-04 , 4e-04 ] )
printSummaryFit(result)
# Example 2. Two population sample
result <- popPCR(x_twoPop, dist = "t")  # available dist values ("normal", "skewed-normal", "t", "skewed-t")
#    Output:
#        Populations detected : 2
#        Total droplets : 10254
#        Positive : 8693 (84.78%)
#        Negative : 1561 (15.22%)
#
#        Target copies in sample          : 44290.3819 ( 95% CI: [ 43215.6408 , 45365.1231 ] )
#        Mean target copies per partition : 1.8823 ( 95% CI: [ 1.8367 , 1.928 ] )
printSummaryFit(result)
# Example 3. Multiple population sample
result <- popPCR(x_multiPop, dist = "t")
printSummaryConc(result)
# Example 3. Multiple population sample
result <- popPCR(x_multiPop, dist = "t", maxComponents = 4)
printSummaryConc(result)
#    Output:
#        Populations detected : 4
#        Total droplets : 1814
#        Positive : 44 (2.43%)
#        Negative : 1252 (69.02%)
#        Rain (1) : 258 (14.22%)
#        Rain (2) : 260 (14.33%)
#
#        Target copies in sample          : 8724.5195 ( 95% CI: [ 7999.0578 , 9449.9812 ] )
#        Mean target copies per partition : 0.3708 ( 95% CI: [ 0.34 , 0.4016 ] )
density(plot(x_multiPop))
#    Output:
#        Populations detected : 4
#        Total droplets : 1814
#        Positive : 44 (2.43%)
#        Negative : 1252 (69.02%)
#        Rain (1) : 258 (14.22%)
#        Rain (2) : 260 (14.33%)
#
#        Target copies in sample          : 8724.5195 ( 95% CI: [ 7999.0578 , 9449.9812 ] )
#        Mean target copies per partition : 0.3708 ( 95% CI: [ 0.34 , 0.4016 ] )
plot(density(x_multiPop))
#    Output:
#        Populations detected : 4
#        Total droplets : 1814
#        Positive : 44 (2.43%)
#        Negative : 1252 (69.02%)
#        Rain (1) : 258 (14.22%)
#        Rain (2) : 260 (14.33%)
#
#        Target copies in sample          : 8724.5195 ( 95% CI: [ 7999.0578 , 9449.9812 ] )
#        Mean target copies per partition : 0.3708 ( 95% CI: [ 0.34 , 0.4016 ] )
plot(density(x_multiPop))
# We can see that Rain (1) is very close to the Negative population.
# Let's include droplets in Rain (1) in the negative droplet count
nNegative <- result@dropletCount$neg + result@dropletCount$rain1
nTotal <- result@dropletCount$total
calculateConc(nNegative, nTotal)
calculateConc(nNegative, nTotal, volSamp = 20, volDrp = 0.85)
#    Output:
#        Results of fitting a 1-component t mixture model
#
#        Negative Population
#        Mix prop. : 1
#        Mu        : 1024.1614
#        Sigma     : 35253.1747
#        Dof       : 2.005
result <- popPCR(x_onePop, dist = "t", negProbThres = 1e-4)  # adjust negProbThres
#    Output:
#        Results of fitting a 1-component t mixture model
#
#        Negative Population
#        Mix prop. : 1
#        Mu        : 1024.1614
#        Sigma     : 35253.1747
#        Dof       : 2.005
result <- popPCR(x_onePop, dist = "t", negProbThres = 1e-4)  # increasing negProbThres makes negative classification stricter
printSummaryConc(result)
?popPCR
library(poppcr)
?popPCR
devtools::build_manual()
library(poppcr)
library(poppcr)
devtools::build_manual()
pack <- "poppcr"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
devtools::build_manual()
devtools::build_manual()
library(poppcr)
devtools::build_manual()
library(poppcr)
devtools::check(manual = TRUE)
install.packages("EMMIXskew")
install.packages("EMMIXskew")
install.packages("EMMIXskew")
install.packages("EMMIXskew")
install.packages("EMMIXskew")
library(poppcr)
library(poppcr)
library(poppcr)
setwd("..")
install("popppcr")
devtools::install("poppcr")
library(poppcr)
library(poppcr)
library(poppcr)
devtools::install("poppcr")
library(poppcr)
popPCR(x_onePop)
..distr <- c("normal"        = "mvn",
"skewed-normal" = "msn",
"t"             = "mvt",
"skewed-t"      = "mst")
..distr
names(..distr)
#' newEstimates
#' #    Output:
#' #       $lambda
#' #          lambda     upper     lower
#' #       0.1834247 0.2040731 0.1627763
#' #
#' #       $conc
#' #           conc    upper    lower
#' #       4315.875 4801.719 3830.031
#'
popPCR <- function(x, dist, volSamp=20, volDrp=0.85, maxComponents=Inf, negProbThres=0.0000001, useOnlyNegProbThres=FALSE){
if(!dist %in% names(..distr)){
stop(paste("Invalid dist. Must be one of", names(..distr)))
}
x <- na.omit(x)
x <- sort(x)
modes <- ..getInitMus(x, maxComponents = maxComponents)
G <- length(modes)
initEMSkew <- list(mu = modes,
sigma = array(rep(1000, G), c(1,1,G)),
pro = rep(1/G, G),
dof = rep(30, G),
delta = t(matrix(rep(0,G))))
df_x <- data.frame(Fluorescence=x)
[[dist]]
em <- EMMIXskew::EmSkew(df_x, init = initEMSkew, g = G, distr = distr, ncov = 3, debug = FALSE)
probs <- ..getClusMemberProb(x, em, useOnlyNegProbThres, negProbThres)
negMemberProb   <- probs$negMemberProb
posMemberProb   <- probs$posMemberProb
rainMemberProb  <- probs$rainMemberProb
classification  <- probs$classification
nneg <- sum(classification == "neg")
npos <- sum(classification == "pos")
dropletCount <- list(total = length(x), pos = npos, neg = nneg)
for(rain in levels(classification)[grepl("rain", levels(classification))]){
dropletCount[[rain]] <- sum(classification == rain)
}
em$mu    <- apply(em$mu,2,function(x){x})
em$sigma <- apply(em$sigma,3,function(x){x})
if("delta" %in% names(em)) em$delta <- apply(em$delta,2,function(x){x})
r <- result.popPCR(estConc = calculateConc(nneg, length(x), volSamp, volDrp),
memberProb = list(droplet = x, negProb = negMemberProb, posProb = posMemberProb, rainProb = rainMemberProb),
G = G,
dist = dist,
em = em,
dropletCount = dropletCount,
classification = classification)
printSummaryConc(r)
invisible(r)
}
#' newEstimates
#' #    Output:
#' #       $lambda
#' #          lambda     upper     lower
#' #       0.1834247 0.2040731 0.1627763
#' #
#' #       $conc
#' #           conc    upper    lower
#' #       4315.875 4801.719 3830.031
#'
popPCR <- function(x, dist, volSamp=20, volDrp=0.85, maxComponents=Inf, negProbThres=0.0000001, useOnlyNegProbThres=FALSE){
if(!dist %in% names(..distr)){
stop(paste("Invalid dist. Must be one of", names(..distr)))
}
x <- na.omit(x)
x <- sort(x)
modes <- ..getInitMus(x, maxComponents = maxComponents)
G <- length(modes)
initEMSkew <- list(mu = modes,
sigma = array(rep(1000, G), c(1,1,G)),
pro = rep(1/G, G),
dof = rep(30, G),
delta = t(matrix(rep(0,G))))
df_x <- data.frame(Fluorescence=x)
distr <- ..distr[[dist]]
em <- EMMIXskew::EmSkew(df_x, init = initEMSkew, g = G, distr = distr, ncov = 3, debug = FALSE)
probs <- ..getClusMemberProb(x, em, useOnlyNegProbThres, negProbThres)
negMemberProb   <- probs$negMemberProb
posMemberProb   <- probs$posMemberProb
rainMemberProb  <- probs$rainMemberProb
classification  <- probs$classification
nneg <- sum(classification == "neg")
npos <- sum(classification == "pos")
dropletCount <- list(total = length(x), pos = npos, neg = nneg)
for(rain in levels(classification)[grepl("rain", levels(classification))]){
dropletCount[[rain]] <- sum(classification == rain)
}
em$mu    <- apply(em$mu,2,function(x){x})
em$sigma <- apply(em$sigma,3,function(x){x})
if("delta" %in% names(em)) em$delta <- apply(em$delta,2,function(x){x})
r <- result.popPCR(estConc = calculateConc(nneg, length(x), volSamp, volDrp),
memberProb = list(droplet = x, negProb = negMemberProb, posProb = posMemberProb, rainProb = rainMemberProb),
G = G,
dist = dist,
em = em,
dropletCount = dropletCount,
classification = classification)
printSummaryConc(r)
invisible(r)
}
result <- popPCR(x_onePop)
result <- popPCR(x_onePop, dist = "x")
paste("Invalid dist. Must be one of", names(..distr))
paste("Invalid dist. Must be one of", names(..distr), collapse = " ")
paste("Invalid dist. Must be one of", names(..distr), sep = " ")
paste("Invalid dist. Must be one of", paste0(names(..distr), collapse=" "))
paste("Invalid dist. Must be one of", paste0(names(..distr), collapse=", "))
paste("Invalid dist. Must be one of `", paste0(names(..distr), collapse="`, "))
paste("Invalid dist. Must be one of `", paste0(names(..distr), collapse="`, "), "`")
paste("Invalid dist. Must be one of `", paste0(names(..distr), collapse="`, `"), "`")
paste0("Invalid dist. Must be one of `", paste0(names(..distr), collapse="`, `"), "`")
#' newEstimates
#' #    Output:
#' #       $lambda
#' #          lambda     upper     lower
#' #       0.1834247 0.2040731 0.1627763
#' #
#' #       $conc
#' #           conc    upper    lower
#' #       4315.875 4801.719 3830.031
#'
popPCR <- function(x, dist, volSamp=20, volDrp=0.85, maxComponents=Inf, negProbThres=0.0000001, useOnlyNegProbThres=FALSE){
if(!dist %in% names(..distr)){
stop(paste0("Invalid dist. Must be one of `", paste0(names(..distr), collapse="`, `"), "`"))
}
x <- na.omit(x)
x <- sort(x)
modes <- ..getInitMus(x, maxComponents = maxComponents)
G <- length(modes)
initEMSkew <- list(mu = modes,
sigma = array(rep(1000, G), c(1,1,G)),
pro = rep(1/G, G),
dof = rep(30, G),
delta = t(matrix(rep(0,G))))
df_x <- data.frame(Fluorescence=x)
distr <- ..distr[[dist]]
em <- EMMIXskew::EmSkew(df_x, init = initEMSkew, g = G, distr = distr, ncov = 3, debug = FALSE)
probs <- ..getClusMemberProb(x, em, useOnlyNegProbThres, negProbThres)
negMemberProb   <- probs$negMemberProb
posMemberProb   <- probs$posMemberProb
rainMemberProb  <- probs$rainMemberProb
classification  <- probs$classification
nneg <- sum(classification == "neg")
npos <- sum(classification == "pos")
dropletCount <- list(total = length(x), pos = npos, neg = nneg)
for(rain in levels(classification)[grepl("rain", levels(classification))]){
dropletCount[[rain]] <- sum(classification == rain)
}
em$mu    <- apply(em$mu,2,function(x){x})
em$sigma <- apply(em$sigma,3,function(x){x})
if("delta" %in% names(em)) em$delta <- apply(em$delta,2,function(x){x})
r <- result.popPCR(estConc = calculateConc(nneg, length(x), volSamp, volDrp),
memberProb = list(droplet = x, negProb = negMemberProb, posProb = posMemberProb, rainProb = rainMemberProb),
G = G,
dist = dist,
em = em,
dropletCount = dropletCount,
classification = classification)
printSummaryConc(r)
invisible(r)
}
result <- popPCR(x_onePop, dist = "x")
library(poppcr)
library(poppcr)
library(poppcr)
library(poppcr)
# Plot histograms of available data
hist(x_onePop, breaks = 100)
hist(x_twoPop, breaks = 100)
hist(x_multiPop, breaks = 100)
# ---- Mixture model fitting ---- #
# Example 1. One population sample
result <- popPCR(x_onePop, dist = "t")  # available dist values ("normal", "skewed-normal", "t", "skewed-t")
printSummaryConc(result)
#    Output:
#        Populations detected : 1
#        Total droplets : 8000
#        Positive : 1 (0.01%)
#        Negative : 7999 (99.99%)
#
#        Target copies in sample          : 2.9414 ( 95% CI: [ -2.8237 , 8.7064 ] )
#        Mean target copies per partition : 1e-04 ( 95% CI: [ -1e-04 , 4e-04 ] )
printSummaryFit(result)
#    Output:
#        Results of fitting a 1-component t mixture model
#
#        Negative Population
#        Mix prop. : 1
#        Mu        : 1024.1614
#        Sigma     : 35253.1747
#        Dof       : 2.005
result <- popPCR(x_onePop, dist = "t", negProbThres = 1e-4)  # increasing negProbThres makes negative classification stricter
printSummaryConc(result)
# Example 2. Two population sample
result <- popPCR(x_twoPop, dist = "t")
printSummaryConc(result)
#    Output:
#        Populations detected : 2
#        Total droplets : 10254
#        Positive : 8693 (84.78%)
#        Negative : 1561 (15.22%)
#
#        Target copies in sample          : 44290.3819 ( 95% CI: [ 43215.6408 , 45365.1231 ] )
#        Mean target copies per partition : 1.8823 ( 95% CI: [ 1.8367 , 1.928 ] )
printSummaryFit(result)
# Example 3. Multiple population sample
result <- popPCR(x_multiPop, dist = "t", maxComponents = 4)
printSummaryConc(result)
# In the output above, we see 2 rain populations! Let's examine its plot.
plot(density(x_multiPop))
# We can see that Rain (1) is very close to the Negative population.
# Let's include droplets in Rain (1) in the negative droplet count.
nNegative <- result@dropletCount$neg + result@dropletCount$rain1
nTotal <- result@dropletCount$total
# Re-estimate concentration as follows
newEstimates <- calculateConc(nNegative, nTotal, volSamp = 20, volDrp = 0.85)
newEstimates
devtools::install_github("zeroh729/poppcr")
devtools::install_github("zeroh729/poppcr")
uninstall("poppcr")
devtools::uninstall("poppcr")
library(poppcr)
library(poppcr)
library(poppcr)
library(poppcr)
library(poppcr)
install("poppcr")
devtools::install("poppcr")
devtools::install("poppcr")
library(poppcr)
# Plot histograms of available data
hist(x_onePop, breaks = 100)
hist(x_twoPop, breaks = 100)
hist(x_multiPop, breaks = 100)
# ---- Mixture model fitting ---- #
# Example 1. One population sample
result <- popPCR(x_onePop, dist = "t")  # available dist values ("normal", "skewed-normal", "t", "skewed-t")
printSummaryConc(result)
#    Output:
#        Populations detected : 1
#        Total droplets : 8000
#        Positive : 1 (0.01%)
#        Negative : 7999 (99.99%)
#
#        Target copies in sample          : 2.9414 ( 95% CI: [ -2.8237 , 8.7064 ] )
#        Mean target copies per partition : 1e-04 ( 95% CI: [ -1e-04 , 4e-04 ] )
printSummaryFit(result)
