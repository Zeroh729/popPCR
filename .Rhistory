result <- popPCR(x_multiPop, dist = "t")
printSummaryConc(result)
# Example 3. Multiple population sample
result <- popPCR(x_multiPop, dist = "t", maxComponents = 4)
printSummaryConc(result)
#    Output:
#        Populations detected : 4
#        Total droplets : 1814
#        Positive : 44 (2.43%)
#        Negative : 1252 (69.02%)
#        Rain (1) : 258 (14.22%)
#        Rain (2) : 260 (14.33%)
#
#        Target copies in sample          : 8724.5195 ( 95% CI: [ 7999.0578 , 9449.9812 ] )
#        Mean target copies per partition : 0.3708 ( 95% CI: [ 0.34 , 0.4016 ] )
density(plot(x_multiPop))
#    Output:
#        Populations detected : 4
#        Total droplets : 1814
#        Positive : 44 (2.43%)
#        Negative : 1252 (69.02%)
#        Rain (1) : 258 (14.22%)
#        Rain (2) : 260 (14.33%)
#
#        Target copies in sample          : 8724.5195 ( 95% CI: [ 7999.0578 , 9449.9812 ] )
#        Mean target copies per partition : 0.3708 ( 95% CI: [ 0.34 , 0.4016 ] )
plot(density(x_multiPop))
#    Output:
#        Populations detected : 4
#        Total droplets : 1814
#        Positive : 44 (2.43%)
#        Negative : 1252 (69.02%)
#        Rain (1) : 258 (14.22%)
#        Rain (2) : 260 (14.33%)
#
#        Target copies in sample          : 8724.5195 ( 95% CI: [ 7999.0578 , 9449.9812 ] )
#        Mean target copies per partition : 0.3708 ( 95% CI: [ 0.34 , 0.4016 ] )
plot(density(x_multiPop))
# We can see that Rain (1) is very close to the Negative population.
# Let's include droplets in Rain (1) in the negative droplet count
nNegative <- result@dropletCount$neg + result@dropletCount$rain1
nTotal <- result@dropletCount$total
calculateConc(nNegative, nTotal)
calculateConc(nNegative, nTotal, volSamp = 20, volDrp = 0.85)
#    Output:
#        Results of fitting a 1-component t mixture model
#
#        Negative Population
#        Mix prop. : 1
#        Mu        : 1024.1614
#        Sigma     : 35253.1747
#        Dof       : 2.005
result <- popPCR(x_onePop, dist = "t", negProbThres = 1e-4)  # adjust negProbThres
#    Output:
#        Results of fitting a 1-component t mixture model
#
#        Negative Population
#        Mix prop. : 1
#        Mu        : 1024.1614
#        Sigma     : 35253.1747
#        Dof       : 2.005
result <- popPCR(x_onePop, dist = "t", negProbThres = 1e-4)  # increasing negProbThres makes negative classification stricter
printSummaryConc(result)
?popPCR
library(poppcr)
?popPCR
devtools::build_manual()
library(poppcr)
library(poppcr)
devtools::build_manual()
pack <- "poppcr"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
devtools::build_manual()
devtools::build_manual()
library(poppcr)
devtools::build_manual()
library(poppcr)
devtools::check(manual = TRUE)
install.packages("EMMIXskew")
install.packages("EMMIXskew")
install.packages("EMMIXskew")
install.packages("EMMIXskew")
install.packages("EMMIXskew")
library(poppcr)
library(poppcr)
library(poppcr)
setwd("..")
install("popppcr")
devtools::install("poppcr")
library(poppcr)
library(poppcr)
library(poppcr)
devtools::install("poppcr")
library(poppcr)
popPCR(x_onePop)
..distr <- c("normal"        = "mvn",
"skewed-normal" = "msn",
"t"             = "mvt",
"skewed-t"      = "mst")
..distr
names(..distr)
#' newEstimates
#' #    Output:
#' #       $lambda
#' #          lambda     upper     lower
#' #       0.1834247 0.2040731 0.1627763
#' #
#' #       $conc
#' #           conc    upper    lower
#' #       4315.875 4801.719 3830.031
#'
popPCR <- function(x, dist, volSamp=20, volDrp=0.85, maxComponents=Inf, negProbThres=0.0000001, useOnlyNegProbThres=FALSE){
if(!dist %in% names(..distr)){
stop(paste("Invalid dist. Must be one of", names(..distr)))
}
x <- na.omit(x)
x <- sort(x)
modes <- ..getInitMus(x, maxComponents = maxComponents)
G <- length(modes)
initEMSkew <- list(mu = modes,
sigma = array(rep(1000, G), c(1,1,G)),
pro = rep(1/G, G),
dof = rep(30, G),
delta = t(matrix(rep(0,G))))
df_x <- data.frame(Fluorescence=x)
[[dist]]
em <- EMMIXskew::EmSkew(df_x, init = initEMSkew, g = G, distr = distr, ncov = 3, debug = FALSE)
probs <- ..getClusMemberProb(x, em, useOnlyNegProbThres, negProbThres)
negMemberProb   <- probs$negMemberProb
posMemberProb   <- probs$posMemberProb
rainMemberProb  <- probs$rainMemberProb
classification  <- probs$classification
nneg <- sum(classification == "neg")
npos <- sum(classification == "pos")
dropletCount <- list(total = length(x), pos = npos, neg = nneg)
for(rain in levels(classification)[grepl("rain", levels(classification))]){
dropletCount[[rain]] <- sum(classification == rain)
}
em$mu    <- apply(em$mu,2,function(x){x})
em$sigma <- apply(em$sigma,3,function(x){x})
if("delta" %in% names(em)) em$delta <- apply(em$delta,2,function(x){x})
r <- result.popPCR(estConc = calculateConc(nneg, length(x), volSamp, volDrp),
memberProb = list(droplet = x, negProb = negMemberProb, posProb = posMemberProb, rainProb = rainMemberProb),
G = G,
dist = dist,
em = em,
dropletCount = dropletCount,
classification = classification)
printSummaryConc(r)
invisible(r)
}
#' newEstimates
#' #    Output:
#' #       $lambda
#' #          lambda     upper     lower
#' #       0.1834247 0.2040731 0.1627763
#' #
#' #       $conc
#' #           conc    upper    lower
#' #       4315.875 4801.719 3830.031
#'
popPCR <- function(x, dist, volSamp=20, volDrp=0.85, maxComponents=Inf, negProbThres=0.0000001, useOnlyNegProbThres=FALSE){
if(!dist %in% names(..distr)){
stop(paste("Invalid dist. Must be one of", names(..distr)))
}
x <- na.omit(x)
x <- sort(x)
modes <- ..getInitMus(x, maxComponents = maxComponents)
G <- length(modes)
initEMSkew <- list(mu = modes,
sigma = array(rep(1000, G), c(1,1,G)),
pro = rep(1/G, G),
dof = rep(30, G),
delta = t(matrix(rep(0,G))))
df_x <- data.frame(Fluorescence=x)
distr <- ..distr[[dist]]
em <- EMMIXskew::EmSkew(df_x, init = initEMSkew, g = G, distr = distr, ncov = 3, debug = FALSE)
probs <- ..getClusMemberProb(x, em, useOnlyNegProbThres, negProbThres)
negMemberProb   <- probs$negMemberProb
posMemberProb   <- probs$posMemberProb
rainMemberProb  <- probs$rainMemberProb
classification  <- probs$classification
nneg <- sum(classification == "neg")
npos <- sum(classification == "pos")
dropletCount <- list(total = length(x), pos = npos, neg = nneg)
for(rain in levels(classification)[grepl("rain", levels(classification))]){
dropletCount[[rain]] <- sum(classification == rain)
}
em$mu    <- apply(em$mu,2,function(x){x})
em$sigma <- apply(em$sigma,3,function(x){x})
if("delta" %in% names(em)) em$delta <- apply(em$delta,2,function(x){x})
r <- result.popPCR(estConc = calculateConc(nneg, length(x), volSamp, volDrp),
memberProb = list(droplet = x, negProb = negMemberProb, posProb = posMemberProb, rainProb = rainMemberProb),
G = G,
dist = dist,
em = em,
dropletCount = dropletCount,
classification = classification)
printSummaryConc(r)
invisible(r)
}
result <- popPCR(x_onePop)
result <- popPCR(x_onePop, dist = "x")
paste("Invalid dist. Must be one of", names(..distr))
paste("Invalid dist. Must be one of", names(..distr), collapse = " ")
paste("Invalid dist. Must be one of", names(..distr), sep = " ")
paste("Invalid dist. Must be one of", paste0(names(..distr), collapse=" "))
paste("Invalid dist. Must be one of", paste0(names(..distr), collapse=", "))
paste("Invalid dist. Must be one of `", paste0(names(..distr), collapse="`, "))
paste("Invalid dist. Must be one of `", paste0(names(..distr), collapse="`, "), "`")
paste("Invalid dist. Must be one of `", paste0(names(..distr), collapse="`, `"), "`")
paste0("Invalid dist. Must be one of `", paste0(names(..distr), collapse="`, `"), "`")
#' newEstimates
#' #    Output:
#' #       $lambda
#' #          lambda     upper     lower
#' #       0.1834247 0.2040731 0.1627763
#' #
#' #       $conc
#' #           conc    upper    lower
#' #       4315.875 4801.719 3830.031
#'
popPCR <- function(x, dist, volSamp=20, volDrp=0.85, maxComponents=Inf, negProbThres=0.0000001, useOnlyNegProbThres=FALSE){
if(!dist %in% names(..distr)){
stop(paste0("Invalid dist. Must be one of `", paste0(names(..distr), collapse="`, `"), "`"))
}
x <- na.omit(x)
x <- sort(x)
modes <- ..getInitMus(x, maxComponents = maxComponents)
G <- length(modes)
initEMSkew <- list(mu = modes,
sigma = array(rep(1000, G), c(1,1,G)),
pro = rep(1/G, G),
dof = rep(30, G),
delta = t(matrix(rep(0,G))))
df_x <- data.frame(Fluorescence=x)
distr <- ..distr[[dist]]
em <- EMMIXskew::EmSkew(df_x, init = initEMSkew, g = G, distr = distr, ncov = 3, debug = FALSE)
probs <- ..getClusMemberProb(x, em, useOnlyNegProbThres, negProbThres)
negMemberProb   <- probs$negMemberProb
posMemberProb   <- probs$posMemberProb
rainMemberProb  <- probs$rainMemberProb
classification  <- probs$classification
nneg <- sum(classification == "neg")
npos <- sum(classification == "pos")
dropletCount <- list(total = length(x), pos = npos, neg = nneg)
for(rain in levels(classification)[grepl("rain", levels(classification))]){
dropletCount[[rain]] <- sum(classification == rain)
}
em$mu    <- apply(em$mu,2,function(x){x})
em$sigma <- apply(em$sigma,3,function(x){x})
if("delta" %in% names(em)) em$delta <- apply(em$delta,2,function(x){x})
r <- result.popPCR(estConc = calculateConc(nneg, length(x), volSamp, volDrp),
memberProb = list(droplet = x, negProb = negMemberProb, posProb = posMemberProb, rainProb = rainMemberProb),
G = G,
dist = dist,
em = em,
dropletCount = dropletCount,
classification = classification)
printSummaryConc(r)
invisible(r)
}
result <- popPCR(x_onePop, dist = "x")
library(poppcr)
library(poppcr)
library(poppcr)
library(poppcr)
# Plot histograms of available data
hist(x_onePop, breaks = 100)
hist(x_twoPop, breaks = 100)
hist(x_multiPop, breaks = 100)
# ---- Mixture model fitting ---- #
# Example 1. One population sample
result <- popPCR(x_onePop, dist = "t")  # available dist values ("normal", "skewed-normal", "t", "skewed-t")
printSummaryConc(result)
#    Output:
#        Populations detected : 1
#        Total droplets : 8000
#        Positive : 1 (0.01%)
#        Negative : 7999 (99.99%)
#
#        Target copies in sample          : 2.9414 ( 95% CI: [ -2.8237 , 8.7064 ] )
#        Mean target copies per partition : 1e-04 ( 95% CI: [ -1e-04 , 4e-04 ] )
printSummaryFit(result)
#    Output:
#        Results of fitting a 1-component t mixture model
#
#        Negative Population
#        Mix prop. : 1
#        Mu        : 1024.1614
#        Sigma     : 35253.1747
#        Dof       : 2.005
result <- popPCR(x_onePop, dist = "t", negProbThres = 1e-4)  # increasing negProbThres makes negative classification stricter
printSummaryConc(result)
# Example 2. Two population sample
result <- popPCR(x_twoPop, dist = "t")
printSummaryConc(result)
#    Output:
#        Populations detected : 2
#        Total droplets : 10254
#        Positive : 8693 (84.78%)
#        Negative : 1561 (15.22%)
#
#        Target copies in sample          : 44290.3819 ( 95% CI: [ 43215.6408 , 45365.1231 ] )
#        Mean target copies per partition : 1.8823 ( 95% CI: [ 1.8367 , 1.928 ] )
printSummaryFit(result)
# Example 3. Multiple population sample
result <- popPCR(x_multiPop, dist = "t", maxComponents = 4)
printSummaryConc(result)
# In the output above, we see 2 rain populations! Let's examine its plot.
plot(density(x_multiPop))
# We can see that Rain (1) is very close to the Negative population.
# Let's include droplets in Rain (1) in the negative droplet count.
nNegative <- result@dropletCount$neg + result@dropletCount$rain1
nTotal <- result@dropletCount$total
# Re-estimate concentration as follows
newEstimates <- calculateConc(nNegative, nTotal, volSamp = 20, volDrp = 0.85)
newEstimates
devtools::install_github("zeroh729/poppcr")
devtools::install_github("zeroh729/poppcr")
uninstall("poppcr")
devtools::uninstall("poppcr")
library(poppcr)
library(poppcr)
library(poppcr)
library(poppcr)
library(poppcr)
install("poppcr")
devtools::install("poppcr")
devtools::install("poppcr")
library(poppcr)
# Plot histograms of available data
hist(x_onePop, breaks = 100)
hist(x_twoPop, breaks = 100)
hist(x_multiPop, breaks = 100)
# ---- Mixture model fitting ---- #
# Example 1. One population sample
result <- popPCR(x_onePop, dist = "t")  # available dist values ("normal", "skewed-normal", "t", "skewed-t")
printSummaryConc(result)
#    Output:
#        Populations detected : 1
#        Total droplets : 8000
#        Positive : 1 (0.01%)
#        Negative : 7999 (99.99%)
#
#        Target copies in sample          : 2.9414 ( 95% CI: [ -2.8237 , 8.7064 ] )
#        Mean target copies per partition : 1e-04 ( 95% CI: [ -1e-04 , 4e-04 ] )
printSummaryFit(result)
library(popPCR)
library(popPCR)
devtools::check(manual = TRUE)
setwd("..")
system("R CMD Rd2pdf popPCR")
system("R CMD Rd2pdf popPCR")
library(popPCR)
library(popPCR)
system("R CMD Rd2pdf popPCR")
system("R CMD Rd2pdf popPCR")
system("R CMD Rd2pdf popPCR")
system("R CMD Rd2pdf popPCR")
devtools::build_vignettes()
setwd("popPCR")
devtools::build_vignettes()
.Last.error.trace
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(popPCR)
library(popPCR)
R CMD check
library(popPCR)
library(popPCR)
library(popPCR)
popPCR(x_onePop, dist="normal")
library(popPCR)
popPCR(x_onePop, dist="normal")
library(popPCR)
popPCR(x_onePop, dist="normal")
library(popPCR)
popPCR(x_onePop, dist="normal")
library(popPCR)
popPCR(x_onePop, dist="normal")
devtools::load_all(".")
devtools::load_all(".")
install.packages("mvtnorm")
install.packages('devtools')
library(popPCR)
popPCR(x_onePop, dist="t")
roxygen2::load_installed()
library(popPCR)
popPCR(x_onePop, dist="t")
install.packages("EMMIXSkew")
devtools::install_github("cran/EMMIXskew")
pkgbuild::compile_dll()
devtools::document()
pkgbuild::compile_dll()
getLoadedDLLs()
pkgbuild::compile_dll(path = "R/EmSkew.R")
getLoadedDLLs()
pkgbuild::compile_dll(path = "src/")
pkgbuild::compile_dll(path = "src")
getLoadedDLLs()
pkgbuild::compile_dll(path = "src/EMMIXskew_init.c")
devtools::document()
library(EMMIXskew)
roxygen2::roxygenize('.', roclets = c('rd', 'collate', 'namespace'))
getLoadedDLLs()
pkgbuild::compile_dll()
getLoadedDLLs()
pkgbuild::clean_dll()
getLoadedDLLs()
roxygen2::roxygenize('.', roclets = c('rd', 'collate', 'namespace'))
devtools::load_all()
roxygen2::roxygenize('.', roclets = c('rd', 'collate', 'namespace'))
getLoadedDLLs()
getDLLRegisteredRoutines.DLLInfo()
getDLLRegisteredRoutines.DLLInfo(dll = "C:/Users/Jeh/Documents/R/win-library/4.1/EMMIXskew/libs/x64/EMMIXskew.dll")
getDLLRegisteredRoutines.DLLInfo(dll = "C:/Users/Jeh/Documents/R/win-library/4.1/EMMIXskew/libs/x64/EMMIXskew.dll", addNames = TRUE)
getDLLRegisteredRoutines.DLLInfo(dll = "EMMIXskew", addNames = TRUE)
getLoadedDLLs()
devtools::load_all()
devtools::load_all()
getLoadedDLLs()
devtools::load_all()
pkgbuild::compile_dll()
devtools::load_all()
pkgbuild::compile_dll()
getLoadedDLLs()
pkgbuild::compile_dll("src/")
getLoadedDLLs()
pkgbuild::compile_dll("src/EMMIXskew_init.c")
getLoadedDLLs()
pkgbuild::compile_dll("src/EMMIXskew_init.o")
getLoadedDLLs()
devtools::load_all()
getLoadedDLLs()
pkgbuild::compile_dll()
devtools::check()
vignette("Rcpp-package")
pkgbuild::compile_dll()
devtools::check()
pkgbuild::compile_dll()
devtools::check()
pkgbuild::compile_dll()
devtools::check()
pkgbuild::compile_dll()
devtools::check()
devtools::load_all(".")
library(popPCR)
popPCR(x_onePop)
popPCR(x_onePop, dist="normal")
library(popPCR)
popPCR(x_onePop, dist="normal")
popPCR(x_onePop, dist="t")
popPCR(x_twoPop, dist="t")
popPCR(x_multiPop, dist="t")
library(popPCR)
calculateConc(10, 100, 0.25, 80)
?popPCR
calculateConc(5000, 20000, volSamp = 20, volDrp = 0.85)
x <- printSummaryConc(popPCR(x_onePop, 't'))
x
?printSummaryConc
library(popPCR)
?printSummaryConc
?printSummaryFit
library(popPCR)
?printSummaryFit
?printSummaryConc
library(popPCR)
?printSummaryFit
?printSummaryFit
library(popPCR)
?printSummaryFit
?printSummaryFit
library(popPCR)
?printSummaryFit
library(popPCR)
?printSummaryFit
result <- popPCR(x_multiPop, dist = "t", maxComponents = 4)
result <- popPCR(x_multiPop, dist = "t", maxComponents = 3)
printSummaryFit(result)
result <- popPCR(x_multiPop, dist = "t", maxComponents = 4)
printSummaryFit(result)
library(popPCR)
result <- popPCR(x_multiPop, dist = "t", maxComponents = 4)
printSummaryFit(result)
?printSummaryFit
?printSummaryFit
library(popPCR)
?printSummaryFit
?printSummaryConc
?printSummaryFit
?printSummaryFit
?printSummaryConc
library(popPCR)
library(popPCR)
?printSummaryConc
?printSummaryConc
library(popPCR)
?printSummaryConc
library(popPCR)
?printSummaryConc
remove.packages("popPCR")
--enable-lto=R
?missing
installr
install.packages("installer")
install.packages("installr")
installr::install.Rdevel()
